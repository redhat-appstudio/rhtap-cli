---
backingServices:
  #
  # Keycloak (IAM)
  #
  keycloak:
    enabled: false
    namespace: __OVERWRITE_ME__
    instances: 1
    database:
      host: __OVERWRITE_ME__
      name: keycloak
      secretName: __OVERWRITE_ME__
    route:
      # The host for the Keycloak route, this is the URL Keycloak will respond to.
      host: __OVERWRITE_ME__
      tls:
        # Toggles the TLS configuration for the Keycloak route, when disabled the
        # endpoint exposed is HTTP only.
        enabled: true
        secretName: &keycloakRouteTLSSecretName keycloak-tls
        termination: reencrypt
      annotations:
        route.openshift.io/termination: reencrypt
    service:
      annotations:
        service.beta.openshift.io/serving-cert-secret-name: *keycloakRouteTLSSecretName
  #
  # ArgoCD
  # 
  argoCD:
    # Toggles the ArgoCD backing service.
    enabled: false
    # ArgoCD instance name, which used in combination with the cluster's
    # application ingress host defines the final ArgoCD's route.
    name: __OVERWRITE_ME__
    # The namespace to deploy ArgoCD instances.
    namespace: __OVERWRITE_ME__
    # The domain for the ArgoCD instance, used to define the final route.
    ingressDomain: __OVERWRITE_ME__
    # The secret name to store the ArgoCD API credentials, this secret is later on
    # used for integration with other services.
    secretName: __OVERWRITE_ME__
    # Route configuration for all ArgoCD components.
    route:
      # Toggles the route for the ArgoCD components.
      enabled: true
      # TLS configuration for the ArgoCD components route.
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
    # Describes the ArgoCD components managed by this chart. Each component can be
    # toggled using the enabled flag.
    components: 
      # ArgoCD Applications controller.
      applicationSet:
        enabled: true
        resources:
          limits:
            cpu: 250m
            memory: 1Gi
          requests:
            cpu: 125m
            memory: 512Mi
      # ArgoCD controller, which is responsible for the reconciliation of the
      # repositories with the cluster state.
      controller:
        enabled: true
        resources:
          limits:
            memory: 6Gi
          requests:
            memory: 3Gi
      # ArgoCD Redis, which is used as a cache for the operational data.
      redis:
        enabled: true
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 125m
            memory: 128Mi
      # ArgoCD repository, which is used to store the application manifests.
      repo:
        enabled: true
        resources:
          limits:
            cpu: 250m
            memory: 1Gi
          requests:
            cpu: 125m
            memory: 256Mi
      # ArgoCD server, which is the main component of the ArgoCD.
      server:
        enabled: true
        resources:
          limits:
            cpu: 250m
            memory: 256Mi
          requests:
            cpu: 125m
            memory: 128Mi
      # ArgoCD single sign on (SSO) configuration. Runs as a standalone POD and
      # thus has its own resources limits.
      sso:
        provider: dex
        dex:
          openShiftOAuth: true
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 125m
              memory: 128Mi
  #
  # Advanced Cluster Security (ACS)
  #
  acs:
    # Toggles the Advanced Cluster Security (ACS) backing service. The service
    # consists of a "Central" instance running on the cluster.
    enabled: false
    # ACS Central instance namespace.
    namespace: __OVERWRITE_ME__
    # ACS Central instance name.
    name: stackrox-central-services
    # ACS instances ingress domain.
    ingressDomain: __OVERWRITE_ME__
    # StackRox API token secret namespace and name.
    integrationSecret:
      namespace: __OVERWRITE_ME__
      name:  rhtap-acs-integration
    # ACS Central instance configuration.
    central:
      # Central instance resources configuration.
      resources: &acsCentralResources
        limits:
          cpu: 1024m
          memory: 4Gi
        requests:
          cpu: 125m
          memory: 512Mi
      # Central instance database configuration.
      db:
        # Resources requirements for the Central instance database.
        resources: *acsCentralResources
    # Controls the scanning settings for ACS scanners, both stable and v4. Which
    # includes the resource limits and scaling settings.
    scanners:
      # Vulnerability analyzer, responsible for scanning the images for potential
      # vulnerabilities using vulnerability databases ("db").
      analyzer:
        scaling: &acsScannerScaling
          autoScaling: Enabled
          maxReplicas: 3
          minReplicas: 1
          replicas: 1
        resources: &acsScannerResources
          limits:
            cpu: 250m
            memory: 1Gi
          requests:
            cpu: 125m
            memory: 256Mi
      # Indexes the vulnerability data discovered by the scanners.
      indexer:
        scaling: *acsScannerScaling
        resources: *acsScannerResources
      # Matches the vulnerability scanned data with container images running in
      # the cluster, based on configured security policies and generating alerts
      # for security teams.
      matcher:
        scaling: *acsScannerScaling
        resources: *acsScannerResources
  #
  # Quay Registry (Image Registry)
  #
  quay:
    # Toggles the Quay registry backing service.
    enabled: false
    # Target namespace for the Quay registry.
    namespace: __OVERWRITE_ME__
    # Quay registry name.
    name: rhtap-quay
    # Quay's registry ingress domain.
    ingressDomain: __OVERWRITE_ME__
    # Quay's organization configuration.
    organization:
      # Organization's name.
      name: rhtap
      # Organization's email.
      email: __OVERWRITE_ME__
    # Quay admin "docker-registry" secret namespace and name.
    secret:
      namespace: __OVERWRITE_ME__
      name: __OVERWRITE_ME__
    # Quay configuration bundle.
    config:
      # To support MinIO S3 instance, the RADOS Gateway (RGW) storage is used
      # (https://github.com/quay/quay-operator/issues/380).
      radosGWStorage:
        # S3 endpoint hostname.
        hostname: __OVERWRITE_ME__
        # S3 endpoint port.
        port: 80
        # Wether the S3 endpoint uses TLS.
        isSecure: false
        # S3 bucket name.
        bucketName: quay
        # MinIO credentials, must be stored in a secret
        credentials:
          # Secret name where the MinIO credentials are stored.
          secretName: __OVERWRITE_ME__
          # Access key name for the MinIO credentials.
          accessKey: username
          # Secret key name for the MinIO credentials.
          secretKey: password
        # Internal S3 storage path.
        storagePath: "/datastorage/registry"
      # Quay's instance adminstration user.
      superUser:
        # Admin (super-user) username.
        name: admin
        # Admin's email.
        email: __OVERWRITE_ME__
    # Enable managed HPA for Quay components, when enabled the
    # `components.*.replicas` won't be used.
    horizontalPodAutoScaler: false
    # Override parts of the Quay managed components configuration.
    componentOverrides:
      # Quay registry application.
      quay:
        replicas: 2
        resources: &quayResources
          limits:
            memory: 4480Mi
          requests:
            memory: 256Mi
      # Quay registry application database.
      postgres:
        resources: &postgresResources
          limits:
            memory: 768Mi
          requests:
            memory: 128Mi
      # Clair vulnerability scanner.
      clair:
        replicas: 1 
        resources: *quayResources
      # Clair vulnerability scanner local database.
      clairpostgres:
        resources: *postgresResources
        