---
infrastructure:
  #
  # Kafka Brokers
  #
  kafkas:
    tpa:
      enabled: false
      namespace: __OVERWRITE_ME__
      replicas: 1
      # Username for the Kafka user, which will generate a Secret, with the same
      # name, containing the password.
      username: __OVERWRITE_ME__
      # Group ID the Kafka consumers will be using, it's added on the topics ACL
      # to allow the group ID to access the topics.
      groupIDs:
        - indexer
      version: 3.6.0
      config:
        default.replication.factor: 1
        inter.broker.protocol.version: "3.6"
        min.insync.replicas: 1
        offsets.topic.replication.factor: 1
        transaction.state.log.min.isr: 1
        transaction.state.log.replication.factor: 1
      kafkaStorage:
        type: persistent-claim
        size: 1Gi
      zookeeperStorage:
        type: persistent-claim
        size: 500Mi
      # List of topics for TPA, some topics are used by MinIO (S3) for
      # notifications, therefore the topic name needs to be aligned with the MinIO
      # configuration.
      topics:
        - name: &topicSbomStored sbom-stored
          config: &kafkaTopicConfig
            retention.ms: 604800000
        - name: sbom-failed
          config: *kafkaTopicConfig
        - name: sbom-indexed
          config: *kafkaTopicConfig
        - name: &topicVexStored vex-stored
          config: *kafkaTopicConfig
        - name: vex-failed
          config: *kafkaTopicConfig
        - name: vex-indexed
          config: *kafkaTopicConfig
        - name: &topicV11yStored v11y-stored
          config: *kafkaTopicConfig
        - name: v11y-failed
          config: *kafkaTopicConfig
        - name: v11y-indexed
          config: *kafkaTopicConfig
  #
  # MinIO Tenants
  #
  minIOTenants:
    # Trusted Profile Analyzer (TPA) needs an S3 compatible storage to store
    # documents and to create integration with Kafka, a message is issued upon
    # document creation.
    tpa:
      enabled: false
      # Target namespace for the MinIO Tenant and related resources.
      namespace: __OVERWRITE_ME__
      # Enable the Ingress resource to expose the MinIO Tenant.
      ingress:
        # Toggle the route resource creation.
        enabled: false
        # The Ingress domain.
        domain: __OVERWRITE_ME__
      # Secret name to store MinIO's root password, the password is generated when
      # the secret is empty.
      rootSecretName: tpa-minio-root-env
      # Secret name for the service TLS settings, should be mounted on the MinIO
      # pods to enable TLS communication between internal services.
      # TODO: enable internal TLS communication.
      # tlsSecretName: &minioTLSSecretName tpa-minio-svc-tls
      # service:
      #   annotations:
      #     service.beta.openshift.io/serving-cert-secret-name: *minioTLSSecretName
      # The list of buckets to be created on the MinIO Tenant.
      buckets:
        - name: *topicSbomStored
        - name: *topicVexStored
        - name: *topicV11yStored
      # Kafka notification settings, the MinIO Tenant will issue a message to the
      # configured topic based on the bucket activity.
      kafkaNotify:
        enabled: true
        # Kafka bootstrap servers.
        bootstrapServers: __OVERWRITE_ME__
        # Kafka username.
        username: __OVERWRITE_ME__
        # Secret with Kafka's password (valueFrom).
        password: {}
        # The list of buckets and Kafka topics as well the events that will
        # trigger sending a message to the topic.
        topics:
          # The bucket name is used to identify the bucket on the MinIO Tenant.
          - bucket: *topicSbomStored
            # Topic name on the Kafka cluster.
            topic: *topicSbomStored
            # Events that will trigger the message, event subscription.
            events: 
              - put
              - delete
          - bucket: *topicVexStored
            topic: *topicVexStored
            events:
              - put
          - bucket: *topicV11yStored
            topic: *topicV11yStored
            events:
              - put
      # MinIO storage pools
      pools:
        - name: pool-0
          servers: 1
          containerSecurityContext:
            runAsNonRoot: true
          volumesPerServer: 1
          volumeClaimTemplate:
            apiVersion: v1
            kind: persistentvolumeclaims
            metadata:
              name: tpa-minio-pvc
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 8Gi
    #
    # Quay.io Tenant, stores the container image artifacts.
    #
    quay:
      enabled: false
      # Target namespace for the MinIO Tenant and related resources.
      namespace: __OVERWRITE_ME__
      # Enable the Ingress resource to expose the MinIO Tenant.
      ingress:
        # Toggle the route resource creation.
        enabled: false
        # The Ingress domain.
        domain: __OVERWRITE_ME__
      # Secret name to store MinIO's root password, the password is generated when
      # the secret is empty, otherwise the existing attributes are used.
      rootSecretName: quay-minio-root-env
      # The list of buckets to be created on the MinIO Tenant.
      buckets:
        - name: quay
      # Quay doesn't rely on Kafka integration.
      kafkaNotify:
        enabled: false
      # MinIO storage pools
      pools:
        - name: pool-0
          servers: 1
          containerSecurityContext:
            runAsNonRoot: true
          volumesPerServer: 1
          volumeClaimTemplate:
            apiVersion: v1
            kind: persistentvolumeclaims
            metadata:
              name: quay-minio-pvc
            spec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 2Gi
  #
  # PostgreSQL Clusters
  #
  postgresClusters:
    keycloak:
      enabled: false
      namespace: __OVERWRITE_ME__
      postgresVersion: 14
      image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:6f4db1e9707b196aaa9f98ada5c09523ec00ade573ff835bd1ca6367ac0bb9f1
      pgbackrestConfig:
        repo1-retention-full: "3"
      backupRepos:
        - name: repo1
          volume:
            volumeClaimSpec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 500Mi
      instances:
        - replicas: 1
          dataVolumeClaimSpec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 500Mi
    guac:
      enabled: false
      namespace: __OVERWRITE_ME__
      postgresVersion: 14
      image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:6f4db1e9707b196aaa9f98ada5c09523ec00ade573ff835bd1ca6367ac0bb9f1
      pgbackrestConfig:
        repo1-retention-full: "3"
      backupRepos:
        - name: repo1
          volume:
            volumeClaimSpec:
              accessModes:
                - ReadWriteOnce
              resources:
                requests:
                  storage: 500Mi
      instances:
        - replicas: 1
          dataVolumeClaimSpec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 500Mi
      patroni:
        dynamicConfiguration:
          postgresql:
            pg_hba:
              - host all all 0.0.0.0/0 scram-sha-256
              - host all all ::1/128 scram-sha-256
  #
  # OpenShift Pipelines
  #
  openShiftPipelines:
    # Toggles the settings related to OpenShift Pipelines components.
    enabled: false
    # The primary OpenShift Pipelines instance name.
    name: tekton-pipeline
    # The namespace where the OpenShift Pipelines components is installed.
    namespace: openshift-pipelines
    # Patches the global TektonConfig resource.
    patchClusterTektonConfig:
      # Resource name to patch.
      resourceName: config
      # Annotations to add to the resource.
      annotations: {}
      # Labels to add to the resource.
      labels: {}
    # Tekton Chains settings.
    tektonChains:
      # Secret name where the signing key is stored, the password is randomly
      # generated and stored on the same secret.
      signingSecretName: signing-secrets
