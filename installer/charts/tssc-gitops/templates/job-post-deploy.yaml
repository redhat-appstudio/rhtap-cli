{{- if .Values.argoCD.enabled }}
  {{- $argoCD := .Values.argoCD }}
  {{- $name := printf "%s-post-deploy" $argoCD.name }}
  {{- $argoCDEnvFile := "/tssc/argocd/env" -}}
#
# Generates the ArgoCD API token and stores it on a Kubernetes secret. The steps
# are executed on a Kubernetes Job in order create a declarative way of generating
# API access credentials for other applications.
#
#   https://github.com/argoproj/argo-cd/issues/9884
#
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    helm.sh/hook: post-install,post-upgrade
  labels:
    {{- include "common.labels" . | nindent 4 }}
  namespace: {{ $argoCD.namespace }}
  name: {{ $name }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}
      restartPolicy: Never
      initContainers:
        #
        # Copying the scripts that will be used on the subsequent containers, the
        # scripts are shared via the "/scripts" volume.
        #
  {{- include "common.copyScripts" . | nindent 8 }}
      containers:
        #
        # Generates a token for the ArgoCD API, the credentials are stored on a
        # file which is later stored as a Kubernetes secret.
        #
        - name: argocd-generate-token
          image: registry.redhat.io/openshift-gitops-1/argocd-rhel8@sha256:5bfc4686983f9c62107772d99d900efbcc38175afe621c40958035aa49bfa9ed
          env:
            - name: ARGOCD_HOSTNAME
              value: {{ include "argoCD.serverHostname" . }}
            - name: ARGOCD_USER
              value: admin
            - name: ARGOCD_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "argoCD.secretClusterName" . }} 
                  key: admin.password
            - name: ARGOCD_ENV_FILE
              value: {{ $argoCDEnvFile }}
          workingDir: /home/argocd
          command:
            - /scripts/argocd-helper.sh
          args:
            - generate
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: tssc-argocd
              mountPath: /tssc/argocd
          securityContext:
            runAsNonRoot: false
            allowPrivilegeEscalation: false
        #
        # Stores the generated token on a secret, the secret data is shared via
        # the "/tssc/argocd" volume, the previous step stored the API credentials
        # on a environment file.
        #
        - name: argocd-store-token
          image: registry.redhat.io/openshift4/ose-tools-rhel9
          env:
            - name: SECRET_NAME
              value: {{ $argoCD.integrationSecret.name }}
            - name: NAMESPACE
              value: {{ $argoCD.integrationSecret.namespace }}
            - name: ARGOCD_ENV_FILE
              value: {{ $argoCDEnvFile }}
          command:
            - /scripts/argocd-helper.sh
          args:
            - store
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: tssc-argocd
              mountPath: /tssc/argocd
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: scripts
          emptyDir: {}
        - name: tssc-argocd
          emptyDir: {}
{{- end }}
