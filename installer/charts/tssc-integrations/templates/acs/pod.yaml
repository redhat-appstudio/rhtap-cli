{{ $integrations := .Values.integrations }}
{{- $secretACS := (lookup "v1" "Secret" .Release.Namespace "tssc-acs-integration") }}
{{- if $secretACS }}
#
# Setup ACS integrations.
# The integration is managed only for products installed by the installer.
# I.e. if the both the ACS instance and the image registry are not managed
# by the installer, it is the Platform Engineer's responsibility to ensure
# the services are connected.
#
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: post-install, post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation, hook-succeeded
  labels:
    {{- include "common.labels" . | nindent 4 }}
  name: tssc-acs-integrations
spec:
  serviceAccountName: {{ .Release.Name }}
  restartPolicy: Never
  initContainers:
    #
    # Copying the scripts that will be used on the subsequent containers, the
    # scripts are shared via the "/scripts" volume.
    #
{{- include "common.copyScripts" . | nindent 8 }}
  containers:
  {{- $noop := true }}
  {{- $secretArtifactory := (lookup "v1" "Secret" .Release.Namespace "tssc-artifactory-integration") }}
  {{- if and $integrations.acs.enabled $secretArtifactory }}
    {{- $noop = false }}
    #
    # Create the Artifactory integration.
    #
    - name: artifactory-integration
      image: registry.redhat.io/openshift4/ose-tools-rhel9
      env:
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: tssc-acs-integration
              key: token
        - name: ROX_CENTRAL_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: tssc-acs-integration
              key: endpoint
      command:
        - /scripts/acs-integration-helper.sh
        - artifactory
      volumeMounts:
        - name: scripts
          mountPath: /scripts
      securityContext:
        allowPrivilegeEscalation: false
  {{- end }}
  {{- $secretNexus := (lookup "v1" "Secret" .Release.Namespace "tssc-nexus-integration") }}
  {{- if and $integrations.acs.enabled $secretNexus }}
    {{- $noop = false }}
    #
    # Create the Nexus integration.
    #
    - name: nexus-integration
      image: registry.redhat.io/openshift4/ose-tools-rhel9
      env:
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: tssc-acs-integration
              key: token
        - name: ROX_CENTRAL_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: tssc-acs-integration
              key: endpoint
      command:
        - /scripts/acs-integration-helper.sh
        - nexus
      volumeMounts:
        - name: scripts
          mountPath: /scripts
      securityContext:
        allowPrivilegeEscalation: false
  {{- end }}
  {{- $secretQuay := (lookup "v1" "Secret" .Release.Namespace "tssc-quay-integration") }}
  {{- if and (or $integrations.acs.enabled $integrations.quay.enabled) $secretQuay }}
    {{- $noop = false }}
    #
    # Create the Quay integration.
    #
    - name: quay-integration
      image: registry.redhat.io/openshift4/ose-tools-rhel9
      env:
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
        - name: ROX_API_TOKEN
          valueFrom:
            secretKeyRef:
              name: tssc-acs-integration
              key: token
        - name: ROX_CENTRAL_ENDPOINT
          valueFrom:
            secretKeyRef:
              name: tssc-acs-integration
              key: endpoint
      command:
        - /scripts/acs-integration-helper.sh
        - quay
      volumeMounts:
        - name: scripts
          mountPath: /scripts
      securityContext:
        allowPrivilegeEscalation: false
  {{- end }}
  {{- if $noop }}
    #
    # Make sure there's at least one container
    #
    - name: no-op
      image: registry.redhat.io/openshift4/ose-tools-rhel9
      command:
        - bash
        - -c
        - "echo 'No op: Success'"
      requests:
        cpu: 125m
        memory: 128Mi
        ephemeral-storage: "100Mi"
      securityContext:
        allowPrivilegeEscalation: false
  {{- end }}
  volumes:
    - name: scripts
      emptyDir: {}
{{- end }}