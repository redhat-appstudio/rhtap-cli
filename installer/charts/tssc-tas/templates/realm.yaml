{{- $keycloak := .Values.trustedArtifactSigner.keycloakRealmImport -}}
{{- if $keycloak.enabled }}
  {{- $tasUsername := "trusted-artifact-signer" -}}
  {{- $tasEmail := printf "%s@%s" $tasUsername .Values.trustedArtifactSigner.ingressDomain -}}
---
  {{- 
    $tasSecretObj := 
      (lookup "v1" "Secret" .Release.Namespace $keycloak.userSecretName) |
      default dict
  -}}
  {{- $tasSecretData := (get $tasSecretObj "data") | default dict -}}
  {{- $tasPassword := (get $tasSecretData "password") | default (randAlphaNum 16 | b64enc) -}}
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: keycloak
  namespace: {{ .Release.Namespace }}
  name: {{
    required ".userSecretName is required"
    $keycloak.userSecretName
  }}
type: Opaque
data:
  username: {{ $tasUsername | b64enc }}
  password: {{ $tasPassword }}
---
  {{- 
    $oidcSecretObj := 
      (lookup "v1" "Secret" .Release.Namespace $keycloak.oidcClientsSecretName) |
      default dict
  -}}
  {{- $oidcSecretData := (get $oidcSecretObj "data") | default dict -}}
  {{- $oidcCredentials := dict -}}
apiVersion: v1
kind: Secret
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app: keycloak
  namespace: {{ .Release.Namespace }}
  name: {{
    required ".oidcClientsSecretName is required"
    $keycloak.oidcClientsSecretName
  }}
type: Opaque
data:
  {{- range $k, $v := .Values.trustedArtifactSigner.keycloakRealmImport.clients -}}
    {{- $s := (get $oidcSecretData $k) | default (include "generate.client.secret" . | b64enc) }}
    {{- $oidcCredentials := mergeOverwrite $oidcCredentials (dict $k $s) }}
  {{ $k }}: {{ $s }}
  {{- end }}
---
apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  labels:
    app: keycloak
  namespace: {{
    required ".keycloakCR.namespace is required"
      $keycloak.keycloakCR.namespace
  }}
  name: trusted-artifact-signer
spec:
  keycloakCRName: {{
    required ".keycloakCR.name is required"
      $keycloak.keycloakCR.name
  }}
  realm:
    accessCodeLifespan: 60
    accessCodeLifespanLogin: 1800
    accessCodeLifespanUserAction: 300
    accessTokenLifespan: 300
    accessTokenLifespanForImplicitFlow: 900
    actionTokenGeneratedByAdminLifespan: 43200
    actionTokenGeneratedByUserLifespan: 300
    adminEventsDetailsEnabled: false
    adminEventsEnabled: false
    attributes:
      cibaAuthRequestedUserHint: login_hint
      cibaBackchannelTokenDeliveryMode: poll
      cibaExpiresIn: "120"
      cibaInterval: "5"
      oauth2DeviceCodeLifespan: "600"
      oauth2DevicePollingInterval: "5"
      parRequestUriLifespan: "60"
      realmReusableOtpCode: "false"
    authenticationFlows:
      - alias: Account verification options
        authenticationExecutions:
          - authenticator: idp-email-verification
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Verify Existing Account by Re-authentication
            priority: 20
            requirement: ALTERNATIVE
            userSetupAllowed: false
        builtIn: true
        description: Method with which to verity the existing account
        providerId: basic-flow
        topLevel: false
      - alias: Authentication Options
        authenticationExecutions:
          - authenticator: basic-auth
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: basic-auth-otp
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: DISABLED
            userSetupAllowed: false
          - authenticator: auth-spnego
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 30
            requirement: DISABLED
            userSetupAllowed: false
        builtIn: true
        description: Authentication options.
        providerId: basic-flow
        topLevel: false
      - alias: Browser - Conditional OTP
        authenticationExecutions:
          - authenticator: conditional-user-configured
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: auth-otp-form
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description: Flow to determine if the OTP is required for the authentication
        providerId: basic-flow
        topLevel: false
      - alias: Direct Grant - Conditional OTP
        authenticationExecutions:
          - authenticator: conditional-user-configured
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: direct-grant-validate-otp
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description: Flow to determine if the OTP is required for the authentication
        providerId: basic-flow
        topLevel: false
      - alias: First broker login - Conditional OTP
        authenticationExecutions:
          - authenticator: conditional-user-configured
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: auth-otp-form
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description: Flow to determine if the OTP is required for the authentication
        providerId: basic-flow
        topLevel: false
      - alias: Handle Existing Account
        authenticationExecutions:
          - authenticator: idp-confirm-link
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Account verification options
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description:
          Handle what to do if there is existing account with same email/username
          like authenticated identity provider
        providerId: basic-flow
        topLevel: false
      - alias: Reset - Conditional OTP
        authenticationExecutions:
          - authenticator: conditional-user-configured
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: reset-otp
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description:
          Flow to determine if the OTP should be reset or not. Set to REQUIRED
          to force.
        providerId: basic-flow
        topLevel: false
      - alias: User creation or linking
        authenticationExecutions:
          - authenticator: idp-create-user-if-unique
            authenticatorConfig: create unique user config
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Handle Existing Account
            priority: 20
            requirement: ALTERNATIVE
            userSetupAllowed: false
        builtIn: true
        description: Flow for the existing/non-existing user alternatives
        providerId: basic-flow
        topLevel: false
      - alias: Verify Existing Account by Re-authentication
        authenticationExecutions:
          - authenticator: idp-username-password-form
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: First broker login - Conditional OTP
            priority: 20
            requirement: CONDITIONAL
            userSetupAllowed: false
        builtIn: true
        description: Reauthentication of existing account
        providerId: basic-flow
        topLevel: false
      - alias: browser
        authenticationExecutions:
          - authenticator: auth-cookie
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticator: auth-spnego
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: DISABLED
            userSetupAllowed: false
          - authenticator: identity-provider-redirector
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 25
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: forms
            priority: 30
            requirement: ALTERNATIVE
            userSetupAllowed: false
        builtIn: true
        description: browser based authentication
        providerId: basic-flow
        topLevel: true
      - alias: clients
        authenticationExecutions:
          - authenticator: client-secret
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticator: client-jwt
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticator: client-secret-jwt
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 30
            requirement: ALTERNATIVE
            userSetupAllowed: false
          - authenticator: client-x509
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 40
            requirement: ALTERNATIVE
            userSetupAllowed: false
        builtIn: true
        description: Base authentication for clients
        providerId: client-flow
        topLevel: true
      - alias: direct grant
        authenticationExecutions:
          - authenticator: direct-grant-validate-username
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: direct-grant-validate-password
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Direct Grant - Conditional OTP
            priority: 30
            requirement: CONDITIONAL
            userSetupAllowed: false
        builtIn: true
        description: OpenID Connect Resource Owner Grant
        providerId: basic-flow
        topLevel: true
      - alias: docker auth
        authenticationExecutions:
          - authenticator: docker-http-basic-authenticator
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description: Used by Docker clients to authenticate against the IDP
        providerId: basic-flow
        topLevel: true
      - alias: first broker login
        authenticationExecutions:
          - authenticator: idp-review-profile
            authenticatorConfig: review profile config
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: User creation or linking
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description:
          Actions taken after first broker login with identity provider account,
          which is not yet linked to any Keycloak account
        providerId: basic-flow
        topLevel: true
      - alias: forms
        authenticationExecutions:
          - authenticator: auth-username-password-form
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Browser - Conditional OTP
            priority: 20
            requirement: CONDITIONAL
            userSetupAllowed: false
        builtIn: true
        description: Username, password, otp and other auth forms.
        providerId: basic-flow
        topLevel: false
      - alias: http challenge
        authenticationExecutions:
          - authenticator: no-cookie-redirect
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Authentication Options
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description:
          An authentication flow based on challenge-response HTTP Authentication
          Schemes
        providerId: basic-flow
        topLevel: true
      - alias: registration
        authenticationExecutions:
          - authenticator: registration-page-form
            authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: registration form
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description: registration flow
        providerId: basic-flow
        topLevel: true
      - alias: registration form
        authenticationExecutions:
          - authenticator: registration-user-creation
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: registration-profile-action
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 40
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: registration-password-action
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 50
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: registration-recaptcha-action
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 60
            requirement: DISABLED
            userSetupAllowed: false
        builtIn: true
        description: registration form
        providerId: form-flow
        topLevel: false
      - alias: reset credentials
        authenticationExecutions:
          - authenticator: reset-credentials-choose-user
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: reset-credential-email
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 20
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticator: reset-password
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 30
            requirement: REQUIRED
            userSetupAllowed: false
          - authenticatorFlow: true
            autheticatorFlow: true
            flowAlias: Reset - Conditional OTP
            priority: 40
            requirement: CONDITIONAL
            userSetupAllowed: false
        builtIn: true
        description: Reset credentials for a user if they forgot their password or something
        providerId: basic-flow
        topLevel: true
      - alias: saml ecp
        authenticationExecutions:
          - authenticator: http-basic-authenticator
            authenticatorFlow: false
            autheticatorFlow: false
            priority: 10
            requirement: REQUIRED
            userSetupAllowed: false
        builtIn: true
        description: SAML ECP Profile Authentication Flow
        providerId: basic-flow
        topLevel: true
    authenticatorConfig:
      - alias: create unique user config
        config:
          require.password.update.after.registration: "false"
      - alias: review profile config
        config:
          update.profile.on.first.login: missing
    browserFlow: browser
    browserSecurityHeaders:
      contentSecurityPolicy: frame-src 'self'; frame-ancestors 'self'; object-src
        'none';
      contentSecurityPolicyReportOnly: ""
      strictTransportSecurity: max-age=31536000; includeSubDomains
      xContentTypeOptions: nosniff
      xFrameOptions: SAMEORIGIN
      xRobotsTag: none
      xXSSProtection: 1; mode=block
    bruteForceProtected: false
    clientAuthenticationFlow: clients
    clientOfflineSessionIdleTimeout: 0
    clientOfflineSessionMaxLifespan: 0
    clientPolicies:
      policies: []
    clientProfiles:
      profiles: []
    clientScopeMappings:
      account:
        - client: account-console
          roles:
            - manage-account
    clientScopes:
      - attributes:
          consent.screen.text: ${profileScopeConsentText}
          display.on.consent.screen: "true"
          include.in.token.scope: "true"
        description: "OpenID Connect built-in scope: profile"
        name: profile
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: given_name
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: firstName
              userinfo.token.claim: "true"
            consentRequired: false
            name: given name
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: "true"
              claim.name: birthdate
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: birthdate
              userinfo.token.claim: "true"
            consentRequired: false
            name: birthdate
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: preferred_username
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: username
              userinfo.token.claim: "true"
            consentRequired: false
            name: username
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: "true"
              claim.name: gender
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: gender
              userinfo.token.claim: "true"
            consentRequired: false
            name: gender
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: picture
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: picture
              userinfo.token.claim: "true"
            consentRequired: false
            name: picture
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: locale
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: locale
              userinfo.token.claim: "true"
            consentRequired: false
            name: locale
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: nickname
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: nickname
              userinfo.token.claim: "true"
            consentRequired: false
            name: nickname
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: middle_name
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: middleName
              userinfo.token.claim: "true"
            consentRequired: false
            name: middle name
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: family_name
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: lastName
              userinfo.token.claim: "true"
            consentRequired: false
            name: family name
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: "true"
              claim.name: updated_at
              id.token.claim: "true"
              jsonType.label: long
              user.attribute: updatedAt
              userinfo.token.claim: "true"
            consentRequired: false
            name: updated at
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: website
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: website
              userinfo.token.claim: "true"
            consentRequired: false
            name: website
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              id.token.claim: "true"
              userinfo.token.claim: "true"
            consentRequired: false
            name: full name
            protocol: openid-connect
            protocolMapper: oidc-full-name-mapper
          - config:
              access.token.claim: "true"
              claim.name: zoneinfo
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: zoneinfo
              userinfo.token.claim: "true"
            consentRequired: false
            name: zoneinfo
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: profile
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: profile
              userinfo.token.claim: "true"
            consentRequired: false
            name: profile
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
      - attributes:
          display.on.consent.screen: "false"
          include.in.token.scope: "true"
        description: Microprofile - JWT built-in scope
        name: microprofile-jwt
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: upn
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: username
              userinfo.token.claim: "true"
            consentRequired: false
            name: upn
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: "true"
              claim.name: groups
              id.token.claim: "true"
              jsonType.label: String
              multivalued: "true"
              user.attribute: foo
            consentRequired: false
            name: groups
            protocol: openid-connect
            protocolMapper: oidc-usermodel-realm-role-mapper
      - attributes:
          consent.screen.text: ${addressScopeConsentText}
          display.on.consent.screen: "true"
          include.in.token.scope: "true"
        description: "OpenID Connect built-in scope: address"
        name: address
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              id.token.claim: "true"
              user.attribute.country: country
              user.attribute.formatted: formatted
              user.attribute.locality: locality
              user.attribute.postal_code: postal_code
              user.attribute.region: region
              user.attribute.street: street
              userinfo.token.claim: "true"
            consentRequired: false
            name: address
            protocol: openid-connect
            protocolMapper: oidc-address-mapper
      - attributes:
          consent.screen.text: ${rolesScopeConsentText}
          display.on.consent.screen: "true"
          include.in.token.scope: "false"
        description: OpenID Connect scope for add user roles to the access token
        name: roles
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: resource_access.${client_id}.roles
              jsonType.label: String
              multivalued: "true"
              user.attribute: foo
            consentRequired: false
            name: client roles
            protocol: openid-connect
            protocolMapper: oidc-usermodel-client-role-mapper
          - config:
              access.token.claim: "true"
              claim.name: realm_access.roles
              jsonType.label: String
              multivalued: "true"
              user.attribute: foo
            consentRequired: false
            name: realm roles
            protocol: openid-connect
            protocolMapper: oidc-usermodel-realm-role-mapper
          - config: {}
            consentRequired: false
            name: audience resolve
            protocol: openid-connect
            protocolMapper: oidc-audience-resolve-mapper
      - attributes:
          consent.screen.text: ""
          display.on.consent.screen: "false"
          include.in.token.scope: "false"
        description:
          OpenID Connect scope for add allowed web origins to the access
          token
        name: web-origins
        protocol: openid-connect
        protocolMappers:
          - config: {}
            consentRequired: false
            name: allowed web origins
            protocol: openid-connect
            protocolMapper: oidc-allowed-origins-mapper
      - attributes:
          consent.screen.text: ${phoneScopeConsentText}
          display.on.consent.screen: "true"
          include.in.token.scope: "true"
        description: "OpenID Connect built-in scope: phone"
        name: phone
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: phone_number_verified
              id.token.claim: "true"
              jsonType.label: boolean
              user.attribute: phoneNumberVerified
              userinfo.token.claim: "true"
            consentRequired: false
            name: phone number verified
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
          - config:
              access.token.claim: "true"
              claim.name: phone_number
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: phoneNumber
              userinfo.token.claim: "true"
            consentRequired: false
            name: phone number
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
      - attributes:
          display.on.consent.screen: "false"
          include.in.token.scope: "false"
        description:
          OpenID Connect scope for add acr (authentication context class
          reference) to the token
        name: acr
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              id.token.claim: "true"
            consentRequired: false
            name: acr loa level
            protocol: openid-connect
            protocolMapper: oidc-acr-mapper
      - attributes:
          consent.screen.text: ${samlRoleListScopeConsentText}
          display.on.consent.screen: "true"
        description: SAML role list
        name: role_list
        protocol: saml
        protocolMappers:
          - config:
              attribute.name: Role
              attribute.nameformat: Basic
              single: "false"
            consentRequired: false
            name: role list
            protocol: saml
            protocolMapper: saml-role-list-mapper
      - attributes:
          consent.screen.text: ${emailScopeConsentText}
          display.on.consent.screen: "true"
          include.in.token.scope: "true"
        description: "OpenID Connect built-in scope: email"
        name: email
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: email_verified
              id.token.claim: "true"
              jsonType.label: boolean
              user.attribute: emailVerified
              userinfo.token.claim: "true"
            consentRequired: false
            name: email verified
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              access.token.claim: "true"
              claim.name: email
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: email
              userinfo.token.claim: "true"
            consentRequired: false
            name: email
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
      - attributes:
          consent.screen.text: ${offlineAccessScopeConsentText}
          display.on.consent.screen: "true"
        description: "OpenID Connect built-in scope: offline_access"
        name: offline_access
        protocol: openid-connect
    clientSessionIdleTimeout: 0
    clientSessionMaxLifespan: 0
    clients:
      - alwaysDisplayInConsole: false
        attributes: {}
        authenticationFlowBindingOverrides: {}
        baseUrl: /realms/trusted-artifact-signer/account/
        bearerOnly: false
        clientAuthenticatorType: client-secret
        clientId: account
        consentRequired: false
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        directAccessGrantsEnabled: false
        enabled: true
        frontchannelLogout: false
        fullScopeAllowed: false
        implicitFlowEnabled: false
        name: ${client_account}
        nodeReRegistrationTimeout: 0
        notBefore: 0
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        protocol: openid-connect
        publicClient: true
        redirectUris:
          - /realms/trusted-artifact-signer/account/*
        rootUrl: ${authBaseUrl}
        serviceAccountsEnabled: false
        standardFlowEnabled: true
        surrogateAuthRequired: false
        webOrigins: []
      - alwaysDisplayInConsole: false
        attributes:
          pkce.code.challenge.method: S256
        authenticationFlowBindingOverrides: {}
        baseUrl: /realms/trusted-artifact-signer/account/
        bearerOnly: false
        clientAuthenticatorType: client-secret
        clientId: account-console
        consentRequired: false
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        directAccessGrantsEnabled: false
        enabled: true
        frontchannelLogout: false
        fullScopeAllowed: false
        implicitFlowEnabled: false
        name: ${client_account-console}
        nodeReRegistrationTimeout: 0
        notBefore: 0
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        protocol: openid-connect
        protocolMappers:
          - config: {}
            consentRequired: false
            name: audience resolve
            protocol: openid-connect
            protocolMapper: oidc-audience-resolve-mapper
        publicClient: true
        redirectUris:
          - /realms/trusted-artifact-signer/account/*
        rootUrl: ${authBaseUrl}
        serviceAccountsEnabled: false
        standardFlowEnabled: true
        surrogateAuthRequired: false
        webOrigins: []
      - alwaysDisplayInConsole: false
        attributes: {}
        authenticationFlowBindingOverrides: {}
        bearerOnly: false
        clientAuthenticatorType: client-secret
        clientId: admin-cli
        consentRequired: false
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        directAccessGrantsEnabled: true
        enabled: true
        frontchannelLogout: false
        fullScopeAllowed: false
        implicitFlowEnabled: false
        name: ${client_admin-cli}
        nodeReRegistrationTimeout: 0
        notBefore: 0
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        protocol: openid-connect
        publicClient: true
        redirectUris: []
        serviceAccountsEnabled: false
        standardFlowEnabled: false
        surrogateAuthRequired: false
        webOrigins: []
      - alwaysDisplayInConsole: false
        attributes: {}
        authenticationFlowBindingOverrides: {}
        bearerOnly: true
        clientAuthenticatorType: client-secret
        clientId: broker
        consentRequired: false
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        directAccessGrantsEnabled: false
        enabled: true
        frontchannelLogout: false
        fullScopeAllowed: false
        implicitFlowEnabled: false
        name: ${client_broker}
        nodeReRegistrationTimeout: 0
        notBefore: 0
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        protocol: openid-connect
        publicClient: false
        redirectUris: []
        serviceAccountsEnabled: false
        standardFlowEnabled: true
        surrogateAuthRequired: false
        webOrigins: []
      - alwaysDisplayInConsole: false
        attributes: {}
        authenticationFlowBindingOverrides: {}
        bearerOnly: true
        clientAuthenticatorType: client-secret
        clientId: realm-management
        consentRequired: false
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        directAccessGrantsEnabled: false
        enabled: true
        frontchannelLogout: false
        fullScopeAllowed: false
        implicitFlowEnabled: false
        name: ${client_realm-management}
        nodeReRegistrationTimeout: 0
        notBefore: 0
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        protocol: openid-connect
        publicClient: false
        redirectUris: []
        serviceAccountsEnabled: false
        standardFlowEnabled: true
        surrogateAuthRequired: false
        webOrigins: []
      - alwaysDisplayInConsole: false
        attributes:
          pkce.code.challenge.method: S256
        authenticationFlowBindingOverrides: {}
        baseUrl: /admin/trusted-artifact-signer/console/
        bearerOnly: false
        clientAuthenticatorType: client-secret
        clientId: security-admin-console
        consentRequired: false
        defaultClientScopes:
          - web-origins
          - acr
          - profile
          - roles
          - email
        directAccessGrantsEnabled: false
        enabled: true
        frontchannelLogout: false
        fullScopeAllowed: false
        implicitFlowEnabled: false
        name: ${client_security-admin-console}
        nodeReRegistrationTimeout: 0
        notBefore: 0
        optionalClientScopes:
          - address
          - phone
          - offline_access
          - microprofile-jwt
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: locale
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: locale
              userinfo.token.claim: "true"
            consentRequired: false
            name: locale
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
        publicClient: true
        redirectUris:
          - /admin/trusted-artifact-signer/console/*
        rootUrl: ${authAdminUrl}
        serviceAccountsEnabled: false
        standardFlowEnabled: true
        surrogateAuthRequired: false
        webOrigins:
          - +
      - alwaysDisplayInConsole: false
        attributes:
          request.object.signature.alg: RS256
          user.info.response.signature.alg: RS256
        authenticationFlowBindingOverrides: {}
        bearerOnly: false
        clientAuthenticatorType: client-secret
        clientId: trusted-artifact-signer
        secret: {{ get $oidcCredentials "trustedArtifactSigner" | b64dec }}
        enabled: {{ $keycloak.clients.trustedArtifactSigner.enabled }}
        consentRequired: false
        defaultClientScopes:
          - profile
          - email
        description: Client for Red Hat Trusted Artifact Signer authentication
        directAccessGrantsEnabled: true
        frontchannelLogout: false
        fullScopeAllowed: true
        implicitFlowEnabled: false
        name: trusted-artifact-signer
        nodeReRegistrationTimeout: -1
        notBefore: 0
        optionalClientScopes: []
        protocol: openid-connect
        protocolMappers:
          - config:
              access.token.claim: "true"
              claim.name: aud
              claim.value: trusted-artifact-signer
              id.token.claim: "true"
              userinfo.token.claim: "true"
            consentRequired: false
            name: audience
            protocol: openid-connect
            protocolMapper: oidc-hardcoded-claim-mapper
          - config:
              claim.name: email
              id.token.claim: "true"
              jsonType.label: String
              user.attribute: email
              userinfo.token.claim: "true"
            consentRequired: false
            name: email
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
          - config:
              claim.name: email-verified
              id.token.claim: "true"
              user.attribute: emailVerified
              userinfo.token.claim: "true"
            consentRequired: false
            name: email-verified
            protocol: openid-connect
            protocolMapper: oidc-usermodel-property-mapper
        publicClient: true
        redirectUris:
          - "*"
          - "urn:ietf:wg:oauth:2.0:oob"
        serviceAccountsEnabled: false
        standardFlowEnabled: true
        surrogateAuthRequired: false
        webOrigins: []
    components:
      org.keycloak.keys.KeyProvider:
        - config:
            algorithm:
              - RSA-OAEP
            priority:
              - "100"
          name: rsa-enc-generated
          providerId: rsa-enc-generated
          subComponents: {}
        - config:
            priority:
              - "100"
          name: aes-generated
          providerId: aes-generated
          subComponents: {}
        - config:
            priority:
              - "100"
          name: rsa-generated
          providerId: rsa-generated
          subComponents: {}
        - config:
            algorithm:
              - HS256
            priority:
              - "100"
          name: hmac-generated
          providerId: hmac-generated
          subComponents: {}
      org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy:
        - config: {}
          name: Full Scope Disabled
          providerId: scope
          subComponents: {}
          subType: anonymous
        - config: {}
          name: Consent Required
          providerId: consent-required
          subComponents: {}
          subType: anonymous
        - config:
            allowed-protocol-mapper-types:
              - oidc-sha256-pairwise-sub-mapper
              - saml-role-list-mapper
              - oidc-usermodel-property-mapper
              - saml-user-property-mapper
              - oidc-usermodel-attribute-mapper
              - oidc-full-name-mapper
              - saml-user-attribute-mapper
              - oidc-address-mapper
          name: Allowed Protocol Mapper Types
          providerId: allowed-protocol-mappers
          subComponents: {}
          subType: authenticated
        - config:
            allow-default-scopes:
              - "true"
          name: Allowed Client Scopes
          providerId: allowed-client-templates
          subComponents: {}
          subType: authenticated
        - config:
            max-clients:
              - "200"
          name: Max Clients Limit
          providerId: max-clients
          subComponents: {}
          subType: anonymous
        - config:
            allowed-protocol-mapper-types:
              - saml-user-property-mapper
              - oidc-usermodel-attribute-mapper
              - oidc-sha256-pairwise-sub-mapper
              - saml-role-list-mapper
              - oidc-full-name-mapper
              - oidc-usermodel-property-mapper
              - saml-user-attribute-mapper
              - oidc-address-mapper
          name: Allowed Protocol Mapper Types
          providerId: allowed-protocol-mappers
          subComponents: {}
          subType: anonymous
        - config:
            client-uris-must-match:
              - "true"
            host-sending-registration-request-must-match:
              - "true"
          name: Trusted Hosts
          providerId: trusted-hosts
          subComponents: {}
          subType: anonymous
        - config:
            allow-default-scopes:
              - "true"
          name: Allowed Client Scopes
          providerId: allowed-client-templates
          subComponents: {}
          subType: anonymous
    defaultDefaultClientScopes:
      - role_list
      - profile
      - email
      - roles
      - web-origins
      - acr
    defaultOptionalClientScopes:
      - offline_access
      - address
      - phone
      - microprofile-jwt
    defaultRole:
      clientRole: false
      composite: true
      description: ${role_default-roles}
      name: default-roles-trusted-artifact-signer
    defaultSignatureAlgorithm: RS256
    directGrantFlow: direct grant
    displayName: Red-Hat-Trusted-Artifact-Signer
    dockerAuthenticationFlow: docker auth
    duplicateEmailsAllowed: false
    editUsernameAllowed: false
    enabled: true
    enabledEventTypes: []
    eventsEnabled: false
    eventsListeners:
      - jboss-logging
    failureFactor: 30
    groups: []
    identityProviderMappers: []
    identityProviders: []
    internationalizationEnabled: false
    loginWithEmailAllowed: true
    maxDeltaTimeSeconds: 43200
    maxFailureWaitSeconds: 900
    minimumQuickLoginWaitSeconds: 60
    notBefore: 0
    oauth2DeviceCodeLifespan: 600
    oauth2DevicePollingInterval: 5
    offlineSessionIdleTimeout: 2592000
    offlineSessionMaxLifespan: 5184000
    offlineSessionMaxLifespanEnabled: false
    otpPolicyAlgorithm: HmacSHA1
    otpPolicyCodeReusable: false
    otpPolicyDigits: 6
    otpPolicyInitialCounter: 0
    otpPolicyLookAheadWindow: 1
    otpPolicyPeriod: 30
    otpPolicyType: totp
    otpSupportedApplications:
      - FreeOTP
      - Google Authenticator
    permanentLockout: false
    quickLoginCheckMilliSeconds: 1000
    realm: trusted-artifact-signer
    refreshTokenMaxReuse: 0
    registrationAllowed: false
    registrationEmailAsUsername: false
    registrationFlow: registration
    rememberMe: false
    requiredActions:
      - alias: CONFIGURE_TOTP
        config: {}
        defaultAction: false
        enabled: true
        name: Configure OTP
        priority: 10
        providerId: CONFIGURE_TOTP
      - alias: terms_and_conditions
        config: {}
        defaultAction: false
        enabled: false
        name: Terms and Conditions
        priority: 20
        providerId: terms_and_conditions
      - alias: UPDATE_PASSWORD
        config: {}
        defaultAction: false
        enabled: true
        name: Update Password
        priority: 30
        providerId: UPDATE_PASSWORD
      - alias: UPDATE_PROFILE
        config: {}
        defaultAction: false
        enabled: true
        name: Update Profile
        priority: 40
        providerId: UPDATE_PROFILE
      - alias: VERIFY_EMAIL
        config: {}
        defaultAction: false
        enabled: true
        name: Verify Email
        priority: 50
        providerId: VERIFY_EMAIL
      - alias: delete_account
        config: {}
        defaultAction: false
        enabled: false
        name: Delete Account
        priority: 60
        providerId: delete_account
      - alias: update_user_locale
        config: {}
        defaultAction: false
        enabled: true
        name: Update User Locale
        priority: 1000
        providerId: update_user_locale
    requiredCredentials:
      - password
    resetCredentialsFlow: reset credentials
    resetPasswordAllowed: false
    revokeRefreshToken: false
    roles:
      client:
        account:
          - attributes: {}
            clientRole: true
            composite: true
            composites:
              client:
                account:
                  - manage-account-links
            description: ${role_manage-account}
            name: manage-account
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-profile}
            name: view-profile
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-applications}
            name: view-applications
          - attributes: {}
            clientRole: true
            composite: true
            composites:
              client:
                account:
                  - view-consent
            description: ${role_manage-consent}
            name: manage-consent
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-account-links}
            name: manage-account-links
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_delete-account}
            name: delete-account
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-consent}
            name: view-consent
        account-console: []
        admin-cli: []
        broker:
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_read-token}
            name: read-token
        realm-management:
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-authorization}
            name: manage-authorization
          - attributes: {}
            clientRole: true
            composite: true
            composites:
              client:
                realm-management:
                  - query-clients
            description: ${role_view-clients}
            name: view-clients
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-clients}
            name: manage-clients
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_query-clients}
            name: query-clients
          - attributes: {}
            clientRole: true
            composite: true
            composites:
              client:
                realm-management:
                  - manage-authorization
                  - view-clients
                  - view-events
                  - manage-clients
                  - query-clients
                  - manage-users
                  - query-groups
                  - manage-realm
                  - create-client
                  - manage-identity-providers
                  - impersonation
                  - manage-events
                  - view-users
                  - query-users
                  - view-identity-providers
                  - view-realm
                  - view-authorization
                  - query-realms
            description: ${role_realm-admin}
            name: realm-admin
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-events}
            name: view-events
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-users}
            name: manage-users
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_query-groups}
            name: query-groups
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-realm}
            name: manage-realm
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_create-client}
            name: create-client
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-identity-providers}
            name: manage-identity-providers
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_impersonation}
            name: impersonation
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_manage-events}
            name: manage-events
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_query-users}
            name: query-users
          - attributes: {}
            clientRole: true
            composite: true
            composites:
              client:
                realm-management:
                  - query-users
                  - query-groups
            description: ${role_view-users}
            name: view-users
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-identity-providers}
            name: view-identity-providers
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-realm}
            name: view-realm
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_view-authorization}
            name: view-authorization
          - attributes: {}
            clientRole: true
            composite: false
            description: ${role_query-realms}
            name: query-realms
        security-admin-console: []
        trusted-artifact-signer: []
      realm:
        - attributes: {}
          clientRole: false
          composite: false
          description: ${role_offline-access}
          name: offline_access
        - attributes: {}
          clientRole: false
          composite: false
          description: ${role_uma_authorization}
          name: uma_authorization
        - attributes: {}
          clientRole: false
          composite: true
          composites:
            client:
              account:
                - manage-account
                - view-profile
            realm:
              - offline_access
              - uma_authorization
          description: ${role_default-roles}
          name: default-roles-trusted-artifact-signer
    scopeMappings:
      - clientScope: offline_access
        roles:
          - offline_access
    smtpServer: {}
    sslRequired: none
    ssoSessionIdleTimeout: 1800
    ssoSessionIdleTimeoutRememberMe: 0
    ssoSessionMaxLifespan: 36000
    ssoSessionMaxLifespanRememberMe: 0
    supportedLocales: []
    userManagedAccessAllowed: false
    users:
      - username: {{ $tasUsername }}
        email: {{ $tasEmail }}
        credentials:
          - type: password
            value: {{ $tasPassword | b64dec }}
            temporary: false
        disableableCredentialTypes: []
        emailVerified: false
        enabled: true
        groups: []
        notBefore: 0
        realmRoles: []
        requiredActions: []
        totp: false
    verifyEmail: false
    waitIncrementSeconds: 60
    webAuthnPolicyAcceptableAaguids: []
    webAuthnPolicyAttestationConveyancePreference: not specified
    webAuthnPolicyAuthenticatorAttachment: not specified
    webAuthnPolicyAvoidSameAuthenticatorRegister: false
    webAuthnPolicyCreateTimeout: 0
    webAuthnPolicyPasswordlessAcceptableAaguids: []
    webAuthnPolicyPasswordlessAttestationConveyancePreference: not specified
    webAuthnPolicyPasswordlessAuthenticatorAttachment: not specified
    webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister: false
    webAuthnPolicyPasswordlessCreateTimeout: 0
    webAuthnPolicyPasswordlessRequireResidentKey: not specified
    webAuthnPolicyPasswordlessRpEntityName: keycloak
    webAuthnPolicyPasswordlessRpId: ""
    webAuthnPolicyPasswordlessSignatureAlgorithms:
      - ES256
    webAuthnPolicyPasswordlessUserVerificationRequirement: not specified
    webAuthnPolicyRequireResidentKey: not specified
    webAuthnPolicyRpEntityName: keycloak
    webAuthnPolicyRpId: ""
    webAuthnPolicySignatureAlgorithms:
      - ES256
    webAuthnPolicyUserVerificationRequirement: not specified
{{- end }}
