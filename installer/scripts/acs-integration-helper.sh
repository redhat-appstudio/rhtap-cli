#!/usr/bin/env bash
#
# Script to setup the integration to the Quay registry.
#

shopt -s inherit_errexit
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

usage() {
    echo "
Usage:
    ${0##*/} [options] REGISTRY

Optional arguments:
    --insecure
        Disable TLS certificate validation in the integration
    -n, --namespace NAMESPACE
        RHTAP installation namespace (default: tssc)
    -d, --debug
        Activate tracing/debug mode.
    -h, --help
        Display this message.

Example:
    ${0##*/} quay
" >&2
}

parse_args() {
    NAMESPACE="${NAMESPACE:-tssc}"
    INSECURE="false"
    while [[ $# -gt 0 ]]; do
        case $1 in
        --insecure)
            INSECURE="true"
            ;;
        -n | --namespace)
            NAMESPACE="$2"
            shift
            ;;
        -d | --debug)
            set -x
            DEBUG="--debug"
            export DEBUG
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            REGISTRY="$1"
            REGISTRY_SECRET="rhtap-$REGISTRY-integration"
            if ! oc get secrets -n "$NAMESPACE" "$REGISTRY_SECRET" >/dev/null 2>&1; then
                fail "Unsupported registry: Could not find '$REGISTRY_SECRET' secret in '$NAMESPACE'."
            fi
            ;;
        esac
        shift
    done
    if [ -z "${REGISTRY:-}" ]; then
        fail "Missing registry"
    fi
}

#
# Functions
#

fail() {
    echo "# [ERROR] ${*}" >&2
    exit 1
}

warn() {
    echo "# [WARN] ${*}" >&2
}

info() {
    echo "# [INFO] ${*}"
}

get_variables() {
    ACS_SECRET="rhtap-acs-integration"
    if [ -z "${ROX_CENTRAL_ENDPOINT:-}" ]; then
        ROX_CENTRAL_ENDPOINT="$(oc get secrets -n "$NAMESPACE" "$ACS_SECRET" -o json | jq -r '.data.endpoint | @base64d')"
    fi
    if [ -z "${ROX_API_TOKEN:-}" ]; then
        ROX_API_TOKEN="$(oc get secrets -n "$NAMESPACE" "$ACS_SECRET" -o json | jq -r '.data.token | @base64d')"
    fi
    # For Nexus and Artifactory, they have two urls, one for UI and one for image registry. When RHTAP integrate with them, 
    # it needs to pass UI url as `--url` parameter to the integration command. If passing image registry url as `--url` parameter,
    # images pushed to Nexus and Artifactory will not apear in the Image Registry page.
    if [ -z "${REGISTRY_ENDPOINT:-}" ]; then
        REGISTRY_ENDPOINT="$(
            oc get secrets -n "$NAMESPACE" "$REGISTRY_SECRET" -o json \
            | jq -r '.data.".dockerconfigjson" | @base64d' \
            | jq -r '.auths | to_entries[0].key'
        )"
    fi
    
    if [ -z "${REGISTRY_USERNAME:-}" ]; then
        REGISTRY_USERNAME="$(
            oc get secrets -n "$NAMESPACE" "$REGISTRY_SECRET" -o json \
            | jq -r '.data.".dockerconfigjson" | @base64d' \
            | jq -r '.auths | to_entries[0].value.auth | @base64d' \
            | cut -d: -f1
        )"
    fi
    if [ -z "${REGISTRY_PASSWORD:-}" ]; then
        REGISTRY_PASSWORD="$(
            oc get secrets -n "$NAMESPACE" "$REGISTRY_SECRET" -o json \
            | jq -r '.data.".dockerconfigjson" | @base64d' \
            | jq -r '.auths | to_entries[0].value.auth | @base64d' \
            | cut -d: -f2-
        )"
    fi

    case "$REGISTRY" in
        quay)
            INTEGRATION_TYPE="quay"
            REGISTRY_CREDENTIALS='"registryRobotCredentials": {
            "username": "'"$REGISTRY_USERNAME"'",
            "password": "'"$REGISTRY_PASSWORD"'"
        }'
            ;;
        *)
            INTEGRATION_TYPE="docker"
            REGISTRY_CREDENTIALS='"username": "'"$REGISTRY_USERNAME"'",
            "password": "'"$REGISTRY_PASSWORD"'"'
            ;;
    esac
    REGISTRY_TYPE="$REGISTRY"
}

get_integration_id() {
    ID="$(
        curl --insecure --silent \
        --header "Authorization: Bearer $ROX_API_TOKEN" \
        --request GET "$URL" \
        | jq -r --arg name "$REGISTRY_ENDPOINT" '.integrations[] | select(.name == $name) | .id'
    )"
}

integration() {
    URL="https://$ROX_CENTRAL_ENDPOINT/v1/imageintegrations"

    get_integration_id
    if [ -z "${ID:-}" ]; then
        HTTP_METHOD=POST
    else
        HTTP_METHOD=PUT
        URL="$URL/$ID"
    fi

    PAYLOAD="$(cat <<EOF
{
    "autogenerated": false,
    "categories": ["REGISTRY"],
    "clusterId": "",
    "id": "",
    "name": "${REGISTRY_ENDPOINT}",
    "${INTEGRATION_TYPE}": {
        "endpoint": "${REGISTRY_ENDPOINT}",
        "insecure": $INSECURE,
        $REGISTRY_CREDENTIALS
    },
    "skipTestIntegration":false,
    "type":"${REGISTRY_TYPE}"
}
EOF
)"

    curl --fail-with-body --insecure --silent \
        --header "Authorization: Bearer $ROX_API_TOKEN" \
        --data "$PAYLOAD" \
        --request "$HTTP_METHOD" \
        "$URL"
    STATUS="$?" 
    echo ""

    return "$STATUS"
}

retry_helper() {
    info "Configure $REGISTRY integration"
    RETRY=30
    wait=30
    for i in $(seq 0 $RETRY); do
        if [ "$i" -gt 0 ]; then
            info "[${i}/$RETRY] Waiting for ${wait} seconds before retrying..."
            sleep ${wait}
        fi
        integration &&
            return 0
        echo ""
    done
    return 1
}

#
# Main
#
main() {
    parse_args "$@"
    get_variables
    if retry_helper; then
        info "ACS helper succeeded."
    else
        fail "ACS helper failed!"
    fi
}

if [ "${BASH_SOURCE[0]}" == "$0" ]; then
    main "$@"
    echo "Success"
fi
