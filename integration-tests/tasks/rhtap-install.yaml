---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: rhtap-install
spec:
  params:
    - name: ocp-login-command
      type: string
      description: ""
    - name: job-spec
      type: string
      description: "The job specification containing details of the test execution."
    - name: rhads-config
      type: string
      description: "The rhads-config file in string format."
    - name: tssc-image
      type: string
      description: "The tssc image containing the tssc binary."
  volumes:
    - name: rhtap-cli-volume
      secret:
        secretName: rhtap-cli-install
    - name: tssc-bin
      emptyDir: {}
  steps:
    - name: copy-tssc
      image: $(params.tssc-image)
      command: ["/bin/sh", "-c"]
      args: ["cp /usr/local/bin/tssc /tssc-bin/ && chmod +x /tssc-bin/tssc"]
      volumeMounts:
        - name: tssc-bin
          mountPath: /tssc-bin
    - name: install
      image: quay.io/redhat-user-workloads/rhtap-shared-team-tenant/rhtap-e2e/rhtap-e2e:56a53cd5d68adf7e7b0dccdc6c483a866d457cef
      env:
        - name: JOB_SPEC
          value: "$(params.job-spec)"
        - name: OCP_LOGIN_COMMAND
          value: "$(params.ocp-login-command)"
      volumeMounts:
        - name: rhtap-cli-volume
          mountPath: /usr/local/rhtap-cli-install
        - name: tssc-bin
          mountPath: /usr/local/tssc-bin
      script: |
        #!/usr/bin/env bash
        set -o errexit
        set -o nounset
        set -o pipefail

        GIT_REPO="${GIT_REPO:-$(echo "$JOB_SPEC" | jq -r '.git.repo // empty')}"
        if [ -z "$GIT_REPO" ]; then
          echo "[ERROR] GIT_REPO is not set in JOB_SPEC"
          exit 1
        fi

        # Clone the rhtap-cli repository
        cd "$(mktemp -d)"

        if [[ "${GIT_REPO}" = "rhtap-cli" ]]; then
            GIT_URL="${GIT_URL:-$(echo "$JOB_SPEC" | jq -r '.git.source_repo_url')}"
            GIT_REVISION="${GIT_REVISION:-$(echo "$JOB_SPEC" | jq -r '.git.commit_sha')}"
            echo -e "INFO: Cloning repository '$GIT_REPO' with revision '$GIT_REVISION' from URL '$GIT_URL'"
            git clone "${GIT_URL}" .
            git checkout "${GIT_REVISION}"
        else
            echo -e "INFO: Cloning repository 'redhat-appstudio/rhtap-cli' with revision 'main'"
            git clone https://github.com/redhat-appstudio/rhtap-cli.git .
        fi

        # Generate the .env file for tssc installation based on the configuration given in the rhads-config
        env_file="integration-tests/scripts/.ci-env"

        # Extract configuration items from rhads-config string
        RHADS_CONFIG_CONTENT="$(params.rhads-config)"
        ACS_CONFIG=$(echo "$RHADS_CONFIG_CONTENT" | tr ' ' '\n' | grep "^ACS=" | cut -d'=' -f2- | tr -d '"')
        TPA_CONFIG=$(echo "$RHADS_CONFIG_CONTENT" | tr ' ' '\n' | grep "^TPA=" | cut -d'=' -f2- | tr -d '"')
        REGISTRY_CONFIG=$(echo "$RHADS_CONFIG_CONTENT" | tr ' ' '\n' | grep "^REGISTRY=" | cut -d'=' -f2- | tr -d '"')
        SCM_CONFIG=$(echo "$RHADS_CONFIG_CONTENT" | tr ' ' '\n' | grep "^SCM=" | cut -d'=' -f2- | tr -d '"')
        PIPELINE_CONFIG=$(echo "$RHADS_CONFIG_CONTENT" | tr ' ' '\n' | grep "^PIPELINE=" | cut -d'=' -f2- | tr -d '"')

        echo "Extracted configuration values:"
        echo "  ACS: $ACS_CONFIG"
        echo "  TPA: $TPA_CONFIG"
        echo "  Registry: $REGISTRY_CONFIG"
        echo "  SCM: $SCM_CONFIG"
        echo "  Pipeline: $PIPELINE_CONFIG"

        # Export configuration values to .env file
        echo "export acs_config=\"$ACS_CONFIG\"" >> ${env_file}
        echo "export tpa_config=\"$TPA_CONFIG\"" >> ${env_file}
        echo "export registry_config=\"$REGISTRY_CONFIG\"" >> ${env_file}
        echo "export scm_config=\"$SCM_CONFIG\"" >> ${env_file}
        echo "export pipeline_config=\"$PIPELINE_CONFIG\"" >> ${env_file}
        echo "export auth_config=\"github\"" >> ${env_file}

        # Check if GIT_REPO is tssc-sample-templates and update Developer Hub catalog url based on PR changes
        if [[ "${GIT_REPO}" = "tssc-sample-templates" ]]; then
            GIT_REVISION="${GIT_REVISION:-$(echo "$JOB_SPEC" | jq -r '.git.commit_sha')}"
            GIT_URL="${GIT_URL:-$(echo "$JOB_SPEC" | jq -r '.git.source_repo_url')}"
            TEST_DH_CATALOG_URL="$GIT_URL/blob/$GIT_REVISION/all.yaml"
            # Update DEVELOPER_HUB__CATALOG__URL value in .ci-env
            sed -i "s|^export DEVELOPER_HUB__CATALOG__URL.*|export DEVELOPER_HUB__CATALOG__URL=${TEST_DH_CATALOG_URL}|" "${env_file}"
        fi

        echo "INFO: .env file for tssc installation"
        cat ${env_file}
        # Deploy tssc
        source ${env_file}
        ./integration-tests/scripts/ci-oc-login.sh
        ./integration-tests/scripts/install.sh
